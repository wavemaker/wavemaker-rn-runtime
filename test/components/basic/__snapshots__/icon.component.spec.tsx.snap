// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`WmIcon Component caption should display left to the icon when iconposition is "left" 1`] = `
[
  <View
    onLayout={[Function]}
    style={
      {
        "height": 0,
        "width": 0,
      }
    }
  />,
  <View>
    <View
      style={
        {
          "alignItems": "center",
          "alignSelf": "flex-start",
          "flexDirection": "row",
        }
      }
      testID="non_animatableView"
    >
      <View>
        <View>
          <Text
            accessible={false}
            size={12}
            style={
              [
                {
                  "color": undefined,
                },
                {
                  "paddingLeft": 0,
                  "paddingRight": 8,
                },
                {
                  "transform": [
                    {
                      "rotate": "0deg",
                    },
                  ],
                },
              ]
            }
            testID="unit-test_wm-icon_icon"
          >
            edit
          </Text>
        </View>
      </View>
      <Text
        accessibilityRole="text"
        accessible={false}
        style={
          {
            "fontFamily": "Roboto",
            "paddingLeft": 8,
            "userSelect": "text",
          }
        }
        testID="unit-test_wm-icon_caption"
      >
        test-button
      </Text>
    </View>
  </View>,
]
`;

exports[`WmIcon Component caption should display left to the icon when iconposition is "right" 1`] = `
[
  <View
    onLayout={[Function]}
    style={
      {
        "height": 0,
        "width": 0,
      }
    }
  />,
  <View>
    <View
      style={
        {
          "alignItems": "center",
          "alignSelf": "flex-start",
          "flexDirection": "row",
        }
      }
      testID="non_animatableView"
    >
      <Text
        accessibilityRole="text"
        accessible={false}
        style={
          {
            "fontFamily": "Roboto",
            "paddingLeft": 8,
            "userSelect": "text",
          }
        }
        testID="unit-test_wm-icon_caption"
      >
        test-button
      </Text>
      <View>
        <View>
          <Text
            accessible={false}
            size={12}
            style={
              [
                {
                  "color": undefined,
                },
                {
                  "paddingLeft": 0,
                  "paddingRight": 8,
                },
                {
                  "transform": [
                    {
                      "rotate": "0deg",
                    },
                  ],
                },
              ]
            }
            testID="unit-test_wm-icon_icon"
          >
            edit
          </Text>
        </View>
      </View>
    </View>
  </View>,
]
`;

exports[`WmIcon Component caption should display next to the icon when caption prop is provided 1`] = `
[
  <View
    onLayout={[Function]}
    style={
      {
        "height": 0,
        "width": 0,
      }
    }
  />,
  <View>
    <View
      style={
        {
          "alignItems": "center",
          "alignSelf": "flex-start",
          "flexDirection": "row",
        }
      }
      testID="non_animatableView"
    >
      <View>
        <View>
          <Text
            accessible={false}
            size={12}
            style={
              [
                {
                  "color": undefined,
                },
                {
                  "paddingLeft": 0,
                  "paddingRight": 8,
                },
                {
                  "transform": [
                    {
                      "rotate": "0deg",
                    },
                  ],
                },
              ]
            }
            testID="unit-test_wm-icon_icon"
          >
            edit
          </Text>
        </View>
      </View>
      <Text
        accessibilityRole="text"
        accessible={false}
        style={
          {
            "fontFamily": "Roboto",
            "paddingLeft": 8,
            "userSelect": "text",
          }
        }
        testID="unit-test_wm-icon_caption"
      >
        test-button
      </Text>
    </View>
  </View>,
]
`;

exports[`WmIcon Component clicking the icon triggers the expected action 1`] = `
[
  <View
    onLayout={[Function]}
    style={
      {
        "height": 0,
        "width": 0,
      }
    }
  />,
  <View
    accessibilityLabel="wm-icon"
    accessibilityState={
      {
        "busy": undefined,
        "checked": undefined,
        "disabled": false,
        "expanded": undefined,
        "selected": undefined,
      }
    }
    accessibilityValue={
      {
        "max": undefined,
        "min": undefined,
        "now": undefined,
        "text": undefined,
      }
    }
    accessible={true}
    collapsable={false}
    focusable={true}
    onBlur={[Function]}
    onClick={[Function]}
    onFocus={[Function]}
    onResponderGrant={[Function]}
    onResponderMove={[Function]}
    onResponderRelease={[Function]}
    onResponderTerminate={[Function]}
    onResponderTerminationRequest={[Function]}
    onStartShouldSetResponder={[Function]}
    style={
      [
        {
          "overflow": "hidden",
        },
        undefined,
      ]
    }
    testID="unit-test_wm-icon_a"
  >
    <View
      style={
        {
          "alignItems": "center",
          "alignSelf": "flex-start",
          "flexDirection": "row",
        }
      }
      testID="non_animatableView"
    >
      <View>
        <View>
          <Text
            accessible={false}
            size={12}
            style={
              [
                {
                  "color": undefined,
                },
                {
                  "paddingLeft": 0,
                  "paddingRight": 8,
                },
                {
                  "transform": [
                    {
                      "rotate": "0deg",
                    },
                  ],
                },
              ]
            }
            testID="unit-test_wm-icon_icon"
          >
            edit
          </Text>
        </View>
      </View>
    </View>
  </View>,
]
`;

exports[`WmIcon Component external icon should load when url is given 1`] = `
[
  <View
    onLayout={[Function]}
    style={
      {
        "height": 0,
        "width": 0,
      }
    }
  />,
  <View>
    <View
      style={
        {
          "alignItems": "center",
          "alignSelf": "flex-start",
          "flexDirection": "row",
        }
      }
      testID="non_animatableView"
    >
      <Image
        source={
          {
            "iconUrl": "https://docs.wavemaker.com/learn/img/WM_blue_logo.png",
          }
        }
        style={
          {
            "height": 12,
            "margin": 0,
            "width": 12,
          }
        }
        testID="unit-test_wm-icon_icon"
      />
    </View>
  </View>,
]
`;

exports[`WmIcon Component icon should component should get type or value as empty string or falsy value when iconclass dose not have icon name of fontaswom icons 1`] = `
[
  <View
    onLayout={[Function]}
    style={
      {
        "height": 0,
        "width": 0,
      }
    }
  />,
  <View>
    <View
      style={
        {
          "alignItems": "center",
          "alignSelf": "flex-start",
          "flexDirection": "row",
        }
      }
      testID="non_animatableView"
    >
      <View>
        <View>
          <Text
            accessible={false}
            size={12}
            style={
              [
                {
                  "color": undefined,
                },
                {
                  "paddingLeft": 0,
                  "paddingRight": 8,
                },
                {
                  "transform": [
                    {
                      "rotate": "0deg",
                    },
                  ],
                },
              ]
            }
            testID="unit-test_test-wm_icon"
          />
        </View>
      </View>
    </View>
  </View>,
]
`;

exports[`WmIcon Component icon should component should get type or value as empty string or falsy value when iconclass dose not have icon name of streamline-light-icon icons 1`] = `
[
  <View
    onLayout={[Function]}
    style={
      {
        "height": 0,
        "width": 0,
      }
    }
  />,
  <View>
    <View
      style={
        {
          "alignItems": "center",
          "alignSelf": "flex-start",
          "flexDirection": "row",
        }
      }
      testID="non_animatableView"
    >
      <View>
        <View>
          <Text
            accessible={false}
            size={12}
            style={
              [
                {
                  "color": undefined,
                },
                {
                  "paddingLeft": 0,
                  "paddingRight": 8,
                },
                {
                  "transform": [
                    {
                      "rotate": "0deg",
                    },
                  ],
                },
              ]
            }
            testID="unit-test_test-wm_icon"
          />
        </View>
      </View>
    </View>
  </View>,
]
`;

exports[`WmIcon Component icon should component should get type or value as empty string or falsy value when iconclass dose not have icon name of streamline-regular-icon icons 1`] = `
[
  <View
    onLayout={[Function]}
    style={
      {
        "height": 0,
        "width": 0,
      }
    }
  />,
  <View>
    <View
      style={
        {
          "alignItems": "center",
          "alignSelf": "flex-start",
          "flexDirection": "row",
        }
      }
      testID="non_animatableView"
    >
      <View>
        <View>
          <Text
            accessible={false}
            size={12}
            style={
              [
                {
                  "color": undefined,
                },
                {
                  "paddingLeft": 0,
                  "paddingRight": 8,
                },
                {
                  "transform": [
                    {
                      "rotate": "0deg",
                    },
                  ],
                },
              ]
            }
            testID="unit-test_test-wm_icon"
          />
        </View>
      </View>
    </View>
  </View>,
]
`;

exports[`WmIcon Component icon should component should get type or value as empty string or falsy value when iconclass dose not have icon name of wavicon icons 1`] = `
[
  <View
    onLayout={[Function]}
    style={
      {
        "height": 0,
        "width": 0,
      }
    }
  />,
  <View>
    <View
      style={
        {
          "alignItems": "center",
          "alignSelf": "flex-start",
          "flexDirection": "row",
        }
      }
      testID="non_animatableView"
    >
      <View>
        <View>
          <Text
            accessible={false}
            size={12}
            style={
              [
                {
                  "color": undefined,
                },
                {
                  "paddingLeft": 0,
                  "paddingRight": 8,
                },
                {
                  "transform": [
                    {
                      "rotate": "0deg",
                    },
                  ],
                },
              ]
            }
            testID="unit-test_test-wm_icon"
          />
        </View>
      </View>
    </View>
  </View>,
]
`;

exports[`WmIcon Component icon size changes correctly when iconsize prop is provided 1`] = `
[
  <View
    onLayout={[Function]}
    style={
      {
        "height": 0,
        "width": 0,
      }
    }
  />,
  <View>
    <View
      style={
        {
          "alignItems": "center",
          "alignSelf": "flex-start",
          "flexDirection": "row",
        }
      }
      testID="non_animatableView"
    >
      <View>
        <View>
          <Text
            accessible={false}
            size={40}
            style={
              [
                {
                  "color": undefined,
                },
                {
                  "paddingLeft": 0,
                  "paddingRight": 8,
                },
                {
                  "transform": [
                    {
                      "rotate": "0deg",
                    },
                  ],
                },
              ]
            }
            testID="unit-test_wm-icon_icon"
          >
            edit
          </Text>
        </View>
      </View>
    </View>
  </View>,
]
`;

exports[`WmIcon Component only caption should display when iconposition prop is not provided or the value is falsy 1`] = `
[
  <View
    onLayout={[Function]}
    style={
      {
        "height": 0,
        "width": 0,
      }
    }
  />,
  <View>
    <View
      style={
        {
          "alignItems": "center",
          "alignSelf": "flex-start",
          "flexDirection": "row",
        }
      }
      testID="non_animatableView"
    >
      <Text
        accessibilityRole="text"
        accessible={false}
        style={
          {
            "fontFamily": "Roboto",
            "paddingLeft": 8,
            "userSelect": "text",
          }
        }
        testID="unit-test_wm-icon_caption"
      >
        test-button
      </Text>
    </View>
  </View>,
]
`;

exports[`WmIcon Component renders the icon with stream line light icon class 1`] = `
[
  <View
    onLayout={[Function]}
    style={
      {
        "height": 0,
        "width": 0,
      }
    }
  />,
  <View>
    <View
      style={
        {
          "alignItems": "center",
          "alignSelf": "flex-start",
          "flexDirection": "row",
        }
      }
      testID="non_animatableView"
    >
      <View>
        <View>
          <Text
            accessible={false}
            size={12}
            style={
              [
                {
                  "color": undefined,
                },
                {
                  "paddingLeft": 0,
                  "paddingRight": 8,
                },
                {
                  "transform": [
                    {
                      "rotate": "0deg",
                    },
                  ],
                },
              ]
            }
            testID="unit-test_wm-icon_icon"
          >
            edit
          </Text>
        </View>
      </View>
    </View>
  </View>,
]
`;

exports[`WmIcon Component renders the icon with stream line regular icon class 1`] = `
[
  <View
    onLayout={[Function]}
    style={
      {
        "height": 0,
        "width": 0,
      }
    }
  />,
  <View>
    <View
      style={
        {
          "alignItems": "center",
          "alignSelf": "flex-start",
          "flexDirection": "row",
        }
      }
      testID="non_animatableView"
    >
      <View>
        <View>
          <Text
            accessible={false}
            size={12}
            style={
              [
                {
                  "color": undefined,
                },
                {
                  "paddingLeft": 0,
                  "paddingRight": 8,
                },
                {
                  "transform": [
                    {
                      "rotate": "0deg",
                    },
                  ],
                },
              ]
            }
            testID="unit-test_wm-icon_icon"
          >
            edit
          </Text>
        </View>
      </View>
    </View>
  </View>,
]
`;

exports[`WmIcon Component renders the icon with the correct icon class 1`] = `
[
  <View
    onLayout={[Function]}
    style={
      {
        "height": 0,
        "width": 0,
      }
    }
  />,
  <View>
    <View
      style={
        {
          "alignItems": "center",
          "alignSelf": "flex-start",
          "flexDirection": "row",
        }
      }
      testID="non_animatableView"
    >
      <View>
        <View>
          <Text
            accessible={false}
            size={12}
            style={
              [
                {
                  "color": undefined,
                },
                {
                  "paddingLeft": 0,
                  "paddingRight": 8,
                },
                {
                  "transform": [
                    {
                      "rotate": "0deg",
                    },
                  ],
                },
              ]
            }
            testID="unit-test_wm-icon_icon"
          >
            edit
          </Text>
        </View>
      </View>
    </View>
  </View>,
]
`;

exports[`WmIcon Component renders the icon with waveicon class 1`] = `
[
  <View
    onLayout={[Function]}
    style={
      {
        "height": 0,
        "width": 0,
      }
    }
  />,
  <View>
    <View
      style={
        {
          "alignItems": "center",
          "alignSelf": "flex-start",
          "flexDirection": "row",
        }
      }
      testID="non_animatableView"
    >
      <View>
        <View>
          <Text
            accessible={false}
            size={12}
            style={
              [
                {
                  "color": undefined,
                },
                {
                  "paddingLeft": 0,
                  "paddingRight": 8,
                },
                {
                  "transform": [
                    {
                      "rotate": "0deg",
                    },
                  ],
                },
              ]
            }
            testID="unit-test_wm-icon_icon"
          >
            edit
          </Text>
        </View>
      </View>
    </View>
  </View>,
]
`;

exports[`WmIcon Component should not render icon when iconclass is falsy  1`] = `
[
  <View
    onLayout={[Function]}
    style={
      {
        "height": 0,
        "width": 0,
      }
    }
  />,
  <View
    accessibilityLabel="test-label"
    accessibilityState={
      {
        "busy": undefined,
        "checked": undefined,
        "disabled": false,
        "expanded": undefined,
        "selected": undefined,
      }
    }
    accessibilityValue={
      {
        "max": undefined,
        "min": undefined,
        "now": undefined,
        "text": undefined,
      }
    }
    accessible={true}
    collapsable={false}
    focusable={true}
    onBlur={[Function]}
    onClick={[Function]}
    onFocus={[Function]}
    onResponderGrant={[Function]}
    onResponderMove={[Function]}
    onResponderRelease={[Function]}
    onResponderTerminate={[Function]}
    onResponderTerminationRequest={[Function]}
    onStartShouldSetResponder={[Function]}
    style={
      [
        {
          "overflow": "hidden",
        },
        undefined,
      ]
    }
    testID="unit-test_wm-icon_a"
  >
    <View
      style={
        {
          "alignItems": "center",
          "alignSelf": "flex-start",
          "flexDirection": "row",
        }
      }
      testID="non_animatableView"
    />
  </View>,
]
`;

exports[`WmIcon Component should render only caption when iconclass is falsy and caption is has value 1`] = `
[
  <View
    onLayout={[Function]}
    style={
      {
        "height": 0,
        "width": 0,
      }
    }
  />,
  <View
    accessibilityLabel="test-label"
    accessibilityRole="wm-icon-ar"
    accessibilityState={
      {
        "busy": undefined,
        "checked": undefined,
        "disabled": false,
        "expanded": undefined,
        "selected": undefined,
      }
    }
    accessibilityValue={
      {
        "max": undefined,
        "min": undefined,
        "now": undefined,
        "text": undefined,
      }
    }
    accessible={true}
    collapsable={false}
    focusable={true}
    onBlur={[Function]}
    onClick={[Function]}
    onFocus={[Function]}
    onResponderGrant={[Function]}
    onResponderMove={[Function]}
    onResponderRelease={[Function]}
    onResponderTerminate={[Function]}
    onResponderTerminationRequest={[Function]}
    onStartShouldSetResponder={[Function]}
    style={
      [
        {
          "overflow": "hidden",
        },
        undefined,
      ]
    }
    testID="unit-test_wm-icon_a"
  >
    <View
      style={
        {
          "alignItems": "center",
          "alignSelf": "flex-start",
          "flexDirection": "row",
        }
      }
      testID="non_animatableView"
    >
      <Text
        accessibilityRole="wm-icon-ar"
        accessible={false}
        style={
          {
            "fontFamily": "Roboto",
            "paddingLeft": 8,
            "userSelect": "text",
          }
        }
        testID="unit-test_wm-icon_caption"
      >
        icon-caption
      </Text>
    </View>
  </View>,
]
`;

exports[`WmIcon Component should render with animations as pulse 1`] = `
[
  <View
    onLayout={[Function]}
    style={
      {
        "height": 0,
        "width": 0,
      }
    }
  />,
  <View>
    <View
      animation="pulse"
      collapsable={false}
      delay={null}
      duration={200}
      style={
        {
          "alignItems": "center",
          "alignSelf": "flex-start",
          "flexDirection": "row",
        }
      }
      testID="animatableView"
      useNativeDriver={true}
    >
      <View>
        <View>
          <Text
            accessible={false}
            size={12}
            style={
              [
                {
                  "color": undefined,
                },
                {
                  "paddingLeft": 0,
                  "paddingRight": 8,
                },
                {
                  "transform": [
                    {
                      "rotate": "0deg",
                    },
                  ],
                },
              ]
            }
            testID="unit-test_wm-icon_icon"
          >
            user
          </Text>
        </View>
      </View>
    </View>
  </View>,
]
`;

exports[`WmIcon Component should render with animations as spin 1`] = `
[
  <View
    onLayout={[Function]}
    style={
      {
        "height": 0,
        "width": 0,
      }
    }
  />,
  <View>
    <View
      animation="spin"
      collapsable={false}
      delay={null}
      duration={200}
      style={
        {
          "alignItems": "center",
          "alignSelf": "flex-start",
          "flexDirection": "row",
        }
      }
      testID="animatableView"
      useNativeDriver={true}
    >
      <View>
        <View>
          <Text
            accessible={false}
            size={12}
            style={
              [
                {
                  "color": undefined,
                },
                {
                  "paddingLeft": 0,
                  "paddingRight": 8,
                },
                {
                  "transform": [
                    {
                      "rotate": "0deg",
                    },
                  ],
                },
              ]
            }
            testID="unit-test_wm-icon_icon"
          >
            user
          </Text>
        </View>
      </View>
    </View>
  </View>,
]
`;
