import {isNumber, isNil, isString } from 'lodash-es';

const isColor = (c: string) => true;
const isStringOrNumber = (v: any) => isNumber(v) || isString(v);
const isIn = (...arr: any) => {
    const obj = {};
    arr.forEach((v: any) => {
        (obj as any)[v] = true;
    })
    return (k: any) => (obj as any)[k] === true ;
};

const STYLE_PROP_TYPE_INFO = {
    alignContent: isIn('flex-start', 'flex-end', 'center', 'stretch', 'space-between', 'space-around'),
    alignItems: isIn('flex-start', 'flex-end', 'center', 'stretch', 'baseline'),
    alignSelf: isIn('auto', 'flex-start', 'flex-end', 'center', 'stretch', 'baseline'),
    aspectRatio: isStringOrNumber,
    backfaceVisibility: isIn('visible', 'hidden'),
    backgroundColor: isColor,
    borderBottomColor: isColor,
    borderBottomEndRadius: isNumber,
    borderBottomLeftRadius: isNumber,
    borderBottomRightRadius: isNumber,
    borderBottomStartRadius: isNumber,
    borderBottomWidth: isNumber,
    borderColor: isColor,
    borderCurve: isIn('circular', 'continuous'),
    borderEndColor: isColor,
    borderEndWidth: isNumber,
    borderLeftColor: isColor,
    borderLeftWidth: isNumber,
    borderRadius: isNumber,
    borderRightColor: isNumber,
    borderRightWidth: isNumber,
    borderStartColor: isColor,
    borderStartWidth: isNumber,
    borderStyle: isIn('solid', 'dotted', 'dashed'),
    borderTopEndRadius: isNumber,
    borderTopLeftRadius: isNumber,
    borderTopRightRadius: isNumber,
    borderTopWidth: isNumber,
    borderWidth: isNumber,
    bottom: isStringOrNumber,
    color: isColor,
    columnGap: isNumber,
    direction: isIn('inherit', 'LTR', 'RTL'),
    display: isIn('none', 'flex'),
    elevation: isNumber,
    end: isStringOrNumber,
    flex: isNumber,
    flexBasis: isStringOrNumber,
    flexDirection: isIn('column', 'row', 'column-reverse', 'row-reverse'),
    flexGrow: isNumber,
    flexShrink: isNumber,
    flexWrap: isIn('wrap', 'nowrap', 'wrap-reverse'),
    fontFamily: isString,
    fontSize: isNumber,
    fontStyle: isIn('normal', 'italic'),
    fontVariant: (v: any) => isIn('small-caps', 'oldstyle-nums', 'lining-nums', 'tabular-nums', 'proportional-nums') || isString(v),
    fontWeight: (v: any) => isIn('normal', 'bold', '100', '200', '300', '400', '500', '600', '700', '800', '900') || isNumber(v),
    gap: isNumber,
    height: isStringOrNumber,
    justifyContent: isIn('flex-start', 'flex-end', 'center', 'space-between', 'space-around', 'space-evenly'),
    left: isStringOrNumber,
    letterSpacing: isNumber,
    lineHeight: isNumber,
    margin: isStringOrNumber,
    marginBottom: isStringOrNumber,
    marginEnd: isStringOrNumber,
    marginHorizontal: isStringOrNumber,
    marginLeft: isStringOrNumber,
    marginRight: isStringOrNumber,
    marginStart: isStringOrNumber,
    marginTop: isStringOrNumber,
    marginVertical: isStringOrNumber,
    maxHeight: isStringOrNumber,
    maxWidth: isStringOrNumber,
    minHeight: isStringOrNumber,
    minWidth: isStringOrNumber,
    opacity: isNumber,
    overflow: isIn('visible', 'hidden', 'scroll'),
    overlayColor: isColor,
    padding: isStringOrNumber,
    paddingBottom: isStringOrNumber,
    paddingEnd: isStringOrNumber,
    paddingHorizontal: isStringOrNumber,
    paddingLeft: isStringOrNumber,
    paddingRight: isStringOrNumber,
    paddingStart: isStringOrNumber,
    paddingTop: isStringOrNumber,
    paddingVertical: isStringOrNumber,
    pointerEvents: isIn('auto', 'box-none', 'box-only', 'none' ),
    position: isIn('absolute', 'relative'),
    resizeMode: isIn('cover', 'contain', 'stretch', 'repeat', 'center'),
    right: isStringOrNumber,
    rowGap: isNumber,
    shadowColor: isColor,
    shadowOpacity: isNumber,
    shadowRadius: isNumber,
    start: isStringOrNumber,
    textAlign: isIn('auto', 'left', 'right', 'center', 'justify'),
    textAlignVertical: isIn('auto', 'top', 'bottom', 'center'),
    textDecorationColor: isColor,
    textDecorationLine: isIn('none', 'underline', 'line-through', 'underline line-through'),
    textDecorationStyle: isIn('solid', 'double', 'dotted', 'dashed'),
    textShadowColor: isColor,
    textShadowRadius: isNumber,
    textTransform: isIn('none', 'uppercase', 'lowercase', 'capitalize'),
    tintColor: isColor,
    top: isStringOrNumber,
    verticalAlign: isIn('auto', 'top', 'bottom', 'middle'),
    width: isStringOrNumber,
    writingDirection: isIn('auto', 'ltr', 'rtl'),
    zIndex: isNumber
};

export const isValidStyleProp = (name: string, value: any) => {
    const isValid = (STYLE_PROP_TYPE_INFO as any)[name];
    return !isValid || isValid(value);
};